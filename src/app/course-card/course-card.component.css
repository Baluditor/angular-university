/*To apply style to the host element we should use the :host syntax*/
:host {
    display: block;
}

/*
    All of those with :host are targeting the host element,
    meaning that the component selector itself.
    In other words that we target the course-card
    (same name as the component selector, most cases this
    would be app-course-card) to style the component. But
    with :host we can extract that from the parent stylesheet
    and move it to the component itself.

    Example:
    This from this in the styles.css
    course-card {
        display: block;
    }
    Will become
    :host {
    display: block;
}
*/

/*
    :host-context can be applied only to a section of
    the css selector. Only apply it where this selector
    (salmon-theme can be found).
    It's a great way to apply styles coming outside of
    the component itself.
*/
:host-context(.salmon-theme) .course-card {
    background-color: salmon;
}

.course-card {
    margin-bottom: 40px;
    text-align: center;
    border-radius: 4px;
    padding: 20px 0;
    box-shadow: 0 1px 16px 0 rgba(0, 0, 0, .2), 0 2px 8px 0 rgba(0, 0, 0, .14), 0 4px 8px -1px rgba(0, 0, 0, .12);
}

/*
    ngDeep can be used to style the components
    provided by content projection
*/

.course-card ::ng-deep .course-title {
    font-size: 27px;
    font-weight: bold;
}

.course-card ::ng-deep .course-description {
    max-width: 360px;
    margin: 0 auto;
    margin-top: 15px;
    user-select: none;
}

.course-card ::ng-deep img {
    border-radius: 4px;
    margin-top: 10px;
}

:host.is-first {
    border-top: 2px solid grey;
    padding-top: 20px;
}

:host.is-last {
    border-bottom: 2px solid grey;
    padding-top: 20px;
}

:host.is-even {
    background: lightgray;
}


:host.is-odd {
    background: lightcyan;
}

/*.:host.beginner {*/
/*    background: lightsalmon;*/
/*}*/
